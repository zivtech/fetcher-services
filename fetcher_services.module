<?php

include_once('fetcher_services.features.inc');

/**
 * Implements hook_menu().
 */
function fetcher_services_menu() {
  $items = array();
  $items['fetcher-services/api/get-token'] = array(
    'page title' => 'OpenSSH Authentication',
    'page callback' => 'fetcher_services_one_time_use_token',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['fetcher-services/api/sites-by-ip'] = array(
    'page title' => 'Sites by IP',
    'page callback' => 'fetcher_services_site_environments_by_ip',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['fetcher-services/api/sites-all'] = array(
    'page title' => 'Get All Sites',
    'page callback' => 'fetcher_services_site_environments_all',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['fetcher-services/api/sites-all/%'] = array(
    'page title' => 'Get All Sites by Environment',
    'page callback' => 'fetcher_services_site_environments_all',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Page Callback for get token.
 */
function fetcher_services_one_time_use_token() {
  global $conf;
  $conf['cache'] = FALSE;
  $random = drupal_random_bytes(64);
  $random = base64_encode(substr(strtr($random, array('+' => '-', '/' => '_', '\\' => '_', '=' => '')), 0, -2));
  $cache_key = substr($random, 0, 80);
  cache_set($cache_key, $random, 'cache_fetcher_services_auth', CACHE_TEMPORARY);
  print json_encode($random);
  return NULL;
}

/**
 *  Page callback to get all sites by ip IP
 */
function fetcher_services_site_environments_by_ip() {
  global $conf;
  $conf['cache'] = FALSE;
  drupal_add_http_header('Cache-Control', 'no-cache');
  drupal_add_http_header('Pragma', 'no-cache');
  drupal_add_http_header('Expires', '-1');
  $ip_address = ip_address();
  module_load_include('inc', 'fetcher_services');
  $options = array(
    'ip_address' => $ip_address,
    'detail' => TRUE,
    'limit' => FALSE,
  );
  $page = NULL;
  $page = !empty($_GET['page']) ? (int) $_GET['page'] : null;
  $sites = _fetcher_service_get_list_of_sites($page, $options);
  print drupal_json_output($sites);
  return NULL;
}

/**
 *  Page callback to get all sites info.
 */
function fetcher_services_site_environments_all($environment = NULL) {
  drupal_add_http_header('Cache-Control', 'no-cache');
  drupal_add_http_header('Pragma', 'no-cache');
  drupal_add_http_header('Expires', '-1');
  module_load_include('inc', 'fetcher_services');

  // @todo: We could allow CIDR ips in the future.
  $allowed_ips = variable_get('fetcher_services_all_environment_info_allowed_ips', array('127.0.0.1'));
  if (!in_array(ip_address(), $allowed_ips)) {
    drupal_access_denied();
  }

  // Only allow true and false as strings.
  if (isset($_GET['support']) && in_array($_GET['support'], array('true', 'false'))) {
    $support = $_GET['support'] == 'true' ? 1 : 0;
  }

  $options = array(
    'environment' => $environment,
    'detail' => TRUE,
    'limit' => FALSE,
    'support' => isset($support) ? $support : NULL,
  );
  $sites = _fetcher_service_get_list_of_sites(NULL, $options);

  print drupal_json_output($sites);
  return NULL;
}

/**
 * Implementation of hook_services_resources().
 */
function fetcher_services_services_resources() {
  $resources['fetcher-site'] = array(
    'operations' => array(
      'index' => array(
        'help' => 'Retrieves a list of Fetcher managed sites.',
        'file' => array(
          'file' => 'inc',
          'module' => 'fetcher_services'
        ),
        'callback' => '_fetcher_services_services_index_sites',
        // TODO: We'll need our own access system.
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        //'access arguments append' => FALSE,
        'args' => array(
          array(
            'name' => 'page',
            'type' => 'int',
            'description' => '',
            'source' => array(
              'param' => 'page',
            ),
            'optional' => TRUE,
            'default value' => 0,
          ),
          array(
            'name' => 'name',
            'type' => 'string',
            'description' => 'The machine name of the site to get',
            'source' => array(
              'param' => 'name',
            ),
            'optional' => TRUE,
            'default value' => '',
          ),
          array(
            'name' => 'detail',
            'type' => 'string',
            'description' => 'Whether to display rich detail for the sites.',
            'source' => array(
              'param' => 'detail',
            ),
            'optional' => TRUE,
            'default value' => FALSE,
          ),
          array(
            'name' => 'server-hostname',
            'type' => 'string',
            'description' => 'Filter the results to only include site environments on a particular server.',
            'source' => array(
              'param' => 'server-hostname',
            ),
            'optional' => TRUE,
            'default value' => FALSE,
          ),
        ),
      ),
      'retrieve' => array(
        'help' => 'Retrieves a single Fetcher managed site.',
        'file' => array(
          'file' => 'inc',
          'module' => 'fetcher_services'
        ),
        'callback' => '_fetcher_services_services_retrieve_site',
        // TODO: We'll need our own access system.
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        //'access arguments append' => FALSE,
        'args' => array(
           array(
             'name' => 'name',
             'type' => 'string',
             'description' => 'The machine name of the site to get',
             'source' => array('path' => '0'),
             'optional' => FALSE,
           ),
        ),
      ),
    ),
  );
  return $resources;
}

/**
 * Immplementation of hook_services_authentication().
 */
function fetcher_services_services_authentication_info() {
  // TODO: Consider moving this to a standalone module?
  if (module_exists('sshkey')) {
    return array(
      'file'             => 'fetcher_services.inc',
      'title'            => t('Public Key'),
      'description'      => t('Authenticate based on a .'),
      'authenticate_call' => '_fetcher_services_services_authentication_authenticate_call',
      'alter_controllers' => '_fetcher_services_services_authentication_alter_methods'
    );
  }
  else {
    return array();
  }
}

function fetcher_services_form_fetcher_site_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_fetcher_services_form_validate';
}

function _fetcher_services_form_validate($form, &$form_state) {
  $environment_langcode = $form['field_ftchr_environment']['#language'];
  $field_environments = $form_state['values']['field_ftchr_environment'][$environment_langcode];
  // Go through each environment and put the value of field_environment_name
  // into $names so we can check them for uniqueness.
  foreach ($field_environments as $key => $field_environment) {
    if (is_array($field_environment) && isset($field_environment['entity'])) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $field_environment['entity']);
      $names[$key] = $wrapper->field_ftchr_environment_name->value();
    }
  }
  // If $names contain only unique values, this statement evaluates to TRUE.
  foreach (array_diff_key($names, array_unique($names)) as $key => $name) {
    form_error($form['field_ftchr_environment'][$environment_langcode][$key]['field_ftchr_environment_name'], t('Enironment names must be unique.'));
  }
}


 /**
  * Lookup a server's nid by its hostname.
  */
function fetcher_services_lookup_server_nid_by_hostname($hostname) {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'fetcher_server')
    ->fieldCondition('field_ftchr_remote_host', 'value', $hostname)
    ->execute();
  return reset(array_keys(reset($results)));
}

 /**
  * Lookup a list of environment field collection ids by server hostname.
  *
  * Only returns ids for environments that are hosted on a server with the provided
  * hostname.
  */
function fetcher_services_services_get_environment_ids_from_server_hostname($hostname) {
  $sites = array();
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_ftchr_environment')
    ->fieldCondition('field_ftchr_server', 'target_id', fetcher_services_lookup_server_nid_by_hostname($hostname))
    ->execute();
  $ids = array();
  if ($results) {
    foreach (reset($results) as $item) {
      $ids[] = $item->item_id;
    }
  }
  return $ids;
}

/**
  * Lookup a server's nid by its IP Address.
  */
function fetcher_services_lookup_server_nid_by_ip_address($ip_address) {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'fetcher_server')
    ->fieldCondition('field_ftchr_server_ip', 'value', $ip_address)
    ->execute();
  return isset($results['node']) && !empty($results['node']) ? reset(array_keys($results['node'])) : FALSE;
}

 /**
  * Lookup a list of environment field collection ids by server IP Address.
  *
  * Only returns ids for environments that are hosted on a server with the provided
  * hostname.
  */
function fetcher_services_services_get_environment_ids_from_server_ip_address($ip_address) {
  $nid = fetcher_services_lookup_server_nid_by_ip_address($ip_address);
  if (!$nid) {
    return array();
  }
  $sites = array();
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_ftchr_environment')
    ->fieldCondition('field_ftchr_server', 'target_id', $nid)
    ->execute();
  $ids = array();
  if ($results) {
    foreach (reset($results) as $item) {
      $ids[] = $item->item_id;
    }
  }
  return $ids;
}

/**
  * Lookup a list of environment field collection ids by environment.
  *
  * Only returns ids for environments that are hosted on a server with the provided
  * hostname.
  */
function fetcher_services_services_get_environment_ids_from_environment($environment) {
  $sites = array();
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_ftchr_environment')
    ->fieldCondition('field_ftchr_environment_name', 'value', $environment)
    ->execute();
  $ids = array();
  if ($results) {
    foreach (reset($results) as $item) {
      $ids[] = $item->item_id;
    }
  }
  return $ids;
}
