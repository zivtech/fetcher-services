<?php
/**
 * @file
 * Code for the Ignition Sites feature.
 */

include_once('fetcher_services.features.inc');

/**
 * Implementation of hook_services_resources().
 */
function fetcher_services_services_resources() {
  $resources['fetcher-site'] = array(
    'index' => array(
      'help' => 'Retrieves a list of Ignition managed sites.',
      'file' => array(
        'file' => 'inc',
        'module' => 'fetcher_services'
      ),
      'callback' => '_fetcher_services_services_index_sites',
      // TODO: We'll need our own access system.
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      //'access arguments append' => FALSE,
      'args' => array(
         array(
           'name' => 'page',
           'type' => 'int',
           'description' => '',
           'source' => array(
             'param' => 'page',
           ),
           'optional' => TRUE,
           'default value' => 0,
         ),
        array(
           'name' => 'name',
           'type' => 'string',
           'description' => 'The machine name of the site to get',
           'source' => array(
             'param' => 'name',
           ),
           'optional' => TRUE,
           'default value' => '',
        ),
      ),
    ),
    'retrieve' => array(
      'help' => 'Retrieves a signle Ignition managed site.',
      'file' => array(
        'file' => 'inc',
        'module' => 'fetcher_services'
      ),
      'callback' => '_fetcher_services_services_retrieve_site',
      // TODO: We'll need our own access system.
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      //'access arguments append' => FALSE,
      'args' => array(
         array(
           'name' => 'name',
           'type' => 'string',
           'description' => 'The machine name of the site to get',
           'source' => array('path' => '0'),
           'optional' => FALSE,
         ),
     ),
    ),
  );
  return $resources;
}

/**
 * Immplementation of hook_services_authentication().
 */
function fetcher_services_services_authentication_info() {
  // TODO: Consider moving this to a standalone module?
  if (module_exists('sshkey')) {
    return array(
      'file'             => 'fetcher_services.inc',
      'title'            => t('Public Key'),
      'description'      => t('Authenticate based on a .'),
      'authenticate_call' => '_fetcher_services_services_authentication_authenticate_call',
      'alter_controllers' => '_fetcher_services_services_authentication_alter_methods'
    );
  }
  else {
    return array();
  }
}

function fetcher_services_form_fetcher_site_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_fetcher_services_form_validate';
}

function _fetcher_services_form_validate($form, &$form_state) {
  $environment_langcode = $form['field_ig_environment']['#language'];
  $field_environments = $form_state['values']['field_ig_environment'][$environment_langcode];
  // Go through each environment and put the value of field_environment_name
  // into $names so we can check them for uniqueness.
  foreach ($field_environments as $key => $field_environment) {
    if (is_array($field_environment) && isset($field_environment['entity'])) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $field_environment['entity']);
      $names[$key] = $wrapper->field_ig_environment_name->value();
    }
  }
  // If $names contain only unique values, this statement evaluates to TRUE.
  foreach (array_diff_key($names, array_unique($names)) as $key => $name) {
    form_error($form['field_ig_environment'][$environment_langcode][$key]['field_ig_environment_name'], t('Enironment names must be unique.'));
  }
}
